/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Starry Night API
 * Starry Night API
 * OpenAPI spec version: 1.0.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";

import type {
  GetV1ChannelChannelIDParams,
  GetV1ChannelParams,
  GetV1ChannelPreferredLanguageCodeParams,
  GetV1ChannelStatusParams,
  StarrynightComServerInternalChannelApplicationDtoCreateChannelDTO,
  StarrynightComServerInternalChannelApplicationDtoCreateChannelTranslationDTO,
  StarrynightComServerInternalChannelApplicationDtoReadChannelDTO,
  StarrynightComServerInternalChannelApplicationDtoUpdateChannelDTO,
  StarrynightComServerInternalChannelDomainEntityChannel,
  StarrynightComServerInternalChannelDomainEntityChannelTranslation,
} from "./schemas";

export const getChannel = () => {
  /**
   * Retrieves all channels for a given language.
   * @summary List all channels
   */
  const getV1Channel = <
    TData = AxiosResponse<
      StarrynightComServerInternalChannelApplicationDtoReadChannelDTO[]
    >,
  >(
    params: GetV1ChannelParams,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(`/v1/channel`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };
  /**
   * Creates a new channel with translations.
   * @summary Create a new channel
   */
  const postV1Channel = <
    TData = AxiosResponse<StarrynightComServerInternalChannelDomainEntityChannel>,
  >(
    starrynightComServerInternalChannelApplicationDtoCreateChannelDTO: StarrynightComServerInternalChannelApplicationDtoCreateChannelDTO,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.post(
      `/v1/channel`,
      starrynightComServerInternalChannelApplicationDtoCreateChannelDTO,
      options
    );
  };
  /**
   * Retrieves channels accessible to the user (active, or exclusive if whitelisted).
   * @summary List channels by preferred language code
   */
  const getV1ChannelPreferredLanguageCode = <
    TData = AxiosResponse<
      StarrynightComServerInternalChannelApplicationDtoReadChannelDTO[]
    >,
  >(
    params: GetV1ChannelPreferredLanguageCodeParams,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(`/v1/channel/preferred-language-code`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };
  /**
   * Retrieves channels by status.
   * @summary List channels by status
   */
  const getV1ChannelStatus = <
    TData = AxiosResponse<
      StarrynightComServerInternalChannelApplicationDtoReadChannelDTO[]
    >,
  >(
    params: GetV1ChannelStatusParams,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(`/v1/channel/status`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };
  /**
   * Retrieves a channel by its ID and language code.
   * @summary Get a specific channel
   */
  const getV1ChannelChannelID = <
    TData = AxiosResponse<StarrynightComServerInternalChannelApplicationDtoReadChannelDTO>,
  >(
    channelID: number,
    params: GetV1ChannelChannelIDParams,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(`/v1/channel/${channelID}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };
  /**
   * Updates details of an existing channel.
   * @summary Update a channel
   */
  const putV1ChannelChannelID = <TData = AxiosResponse<void>>(
    channelID: number,
    starrynightComServerInternalChannelApplicationDtoUpdateChannelDTO: StarrynightComServerInternalChannelApplicationDtoUpdateChannelDTO,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.put(
      `/v1/channel/${channelID}`,
      starrynightComServerInternalChannelApplicationDtoUpdateChannelDTO,
      options
    );
  };
  /**
   * Deletes a channel by its ID.
   * @summary Delete a channel
   */
  const deleteV1ChannelChannelID = <TData = AxiosResponse<void>>(
    channelID: number,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.delete(`/v1/channel/${channelID}`, options);
  };
  /**
   * Adds a new language translation to an existing channel.
   * @summary Add a translation to a channel
   */
  const postV1ChannelChannelIDTranslation = <
    TData = AxiosResponse<StarrynightComServerInternalChannelDomainEntityChannelTranslation>,
  >(
    channelID: number,
    starrynightComServerInternalChannelApplicationDtoCreateChannelTranslationDTO: StarrynightComServerInternalChannelApplicationDtoCreateChannelTranslationDTO,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.post(
      `/v1/channel/${channelID}/translation`,
      starrynightComServerInternalChannelApplicationDtoCreateChannelTranslationDTO,
      options
    );
  };
  return {
    getV1Channel,
    postV1Channel,
    getV1ChannelPreferredLanguageCode,
    getV1ChannelStatus,
    getV1ChannelChannelID,
    putV1ChannelChannelID,
    deleteV1ChannelChannelID,
    postV1ChannelChannelIDTranslation,
  };
};
export type GetV1ChannelResult = AxiosResponse<
  StarrynightComServerInternalChannelApplicationDtoReadChannelDTO[]
>;
export type PostV1ChannelResult =
  AxiosResponse<StarrynightComServerInternalChannelDomainEntityChannel>;
export type GetV1ChannelPreferredLanguageCodeResult = AxiosResponse<
  StarrynightComServerInternalChannelApplicationDtoReadChannelDTO[]
>;
export type GetV1ChannelStatusResult = AxiosResponse<
  StarrynightComServerInternalChannelApplicationDtoReadChannelDTO[]
>;
export type GetV1ChannelChannelIDResult =
  AxiosResponse<StarrynightComServerInternalChannelApplicationDtoReadChannelDTO>;
export type PutV1ChannelChannelIDResult = AxiosResponse<void>;
export type DeleteV1ChannelChannelIDResult = AxiosResponse<void>;
export type PostV1ChannelChannelIDTranslationResult =
  AxiosResponse<StarrynightComServerInternalChannelDomainEntityChannelTranslation>;
