# .github/workflows/deploy.yml
name: CI/CD to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) 리포지토리 코드 가져오기
      - uses: actions/checkout@v3

      # 2) JDK17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      # 3) Gradle로 빌드 (테스트 제외)
      - name: Build with Gradle
        run: ./gradlew clean bootJar -x test

      # 4) SSH 키 에이전트에 로드
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 4.1) EC2 호스트 키를 known_hosts에 등록
      - name: Add EC2 host to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      # 5) 빌드된 JAR을 서버로 복사
      - name: Copy JAR to server
        run: |
          scp build/libs/*.jar \
            ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.REMOTE_APP_PATH }}/dopamine.jar

      # 6) 서버에서 기존 프로세스 종료하고, 외부 application.yml 참조하여 재시작
      - name: Restart service on server
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            # (1) 이전 버전 종료
            pkill -f 'java -jar' || true

            # (2) external application.yml 을 읽어 실행
            nohup java -jar ${{ secrets.REMOTE_APP_PATH }}/dopamine.jar \
              --spring.config.location=file:${{ secrets.REMOTE_APP_PATH }}/application.yml \
              --spring.profiles.active=prod \
              > ${{ secrets.REMOTE_APP_PATH }}/app.log 2>&1 &

            exit
          EOF
